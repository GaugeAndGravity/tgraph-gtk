NAME
	tgraph.py - plot 1D and 2D data files

SYNOPSIS
	tgraph.py [OPTION]... FILE... { FILE... } ... [ FILE... ]

DESCRIPTION
	Plot and animate data from files that contain multiple timeframes.
	tgraph.py was inspired by ygraph. In addition to 2D plots, tgraph.py 
	can also create 3D plots from 2D datafiles that are in text format
	suitable for gnuplot's splot command (i.e. with empty lines between
	blocks with different y-coordinates). It can also show 3D plots of
	2D VTK datafiles in legacy format of type STRUCTURED_POINTS (where
	one of the 3D DIMENSIONS has size 1) or of type STRUCTURED_GRID.

OPTIONS
	{ FILE... }
		add columns from different files by enclosing files in { }

	[ FILE... ]
		add timeframes from different files by enclosing files in [ ]

	-c XCOL:VCOL
		Specify which columns of a file we use for a 2D plot. Can be 
		specified for each file.

	-c XCOL:YCOL:VCOL
		Specify which columns of a file we use for a 3D plot. Can be
		specified for each file.

	-x XMIN:XMAX
		Specify x-range for all 2D and 3D plots.

	-y YMIN:YMAX
		Specify y-range for all 3D plots.

	-v VMIN:VMAX
		Specify value- or v-range for all 2D and 3D plots.

	-t TIMELABEL
		Specify string used to find timelabels in data files.

	-s STRIDE
		Specify stride (or step size) used to sample input data.

	-m
		Mark each point.

EXAMPLES
	select columns 1,2 in file1 and columns 1,4 of file2,file3 added
	together:
		tgraph.py -c 1:2 file1 -c 1:4 { file2 file3 }

	select cols 1,2,4 from t1.vtk,t2.vtk,t3.vtk containing one timeframe
	each:
		tgraph.py -c 1:2:4 [ t1.vtk t2.vtk t3.vtk ]

	select x- and value-ranges for data in file1 and mark points:
		tgraph.py -x 1:5 -v 0:2 -m file1

	plot cols 10,13 of a Cactus .asc file using "iteration" as timelabel:
		tgraph.py -t "iteration" -c 10:13 rho.x.asc

TIPS
	If a dataset is split over several files it is possible to merge all
	columns of these files by simply enclosing the relevant list of files
	within curly brackets. Then tgraph.py can plot the relevant columns,
	e.g. plot columns 1 and 4 from the file1 and file2 added together:
		tgraph.py -c 1:4 { file1 file2 }

	For a 3D plot we need to specify the -c argument. Many BAM VTK
	files contain 4 columns (x, y, z, data). Then we need e.g.:
		tgraph.py -c 1:2:4 [ gxx*.vtk ]

	If the word "time" occurs in comments, but is not a timelabel, we
	can use the sed utility to replace it. This happens a lot in .asc
	files from Cactus. E.g. if rho.x.asc contains the word "9:time",
	we can plot it like this:
		sed 's/9:time/9:Zeit/' rho.x.asc > f ; tgraph.py f

	Yet, to plot Cactus .asc files it is often best to use the word
	"iteration" as timelabel, e.g.:
		tgraph.py -t "iteration" -c 10:13 rho.x.asc

	Once tgraph.py has loaded data and has started, various options are
	available through a simple Tk user interface. One can change things
	like line colors, styles or legend placement. All these are
	matplotlib options which follow matplotlib naming conventions, e.g.
	'b' for blue or '--' for a dashed line. You can find out more about
	them by reading the matplotlib documentation.

	If we click on "Transform Columns", we can transform data columns in
	each file. E.g. to set column 3 to twice column 2 plus sin(t), we
	can just enter "c[3] = 2*c[2] + sin(t)" in the pop-up window.
	For the derivative we enter "c[3] = D(c[2])/D(c[1])".
	In order to then plot column 3 we can click on "Select v-Columns" and
	enter "3".

	In order to make a movie from an animation, tgraph.py can save
	individual movie frames as png-images. These png-images can then be
	used to make a movie with a tool like ffmpeg, e.g. if you have
	frame_00.png ... frame_72.png you can use:
		ffmpeg -r 10 -i frame_%02d.png  movie.avi

	tgraph.py does not understand HDF5 format. However, we can plot HDF5
	data (e.g. /SomeDat in file Psi.h5) with the help of h5dump:
		h5dump -d /SomeDat -y -w 0 -o f.txt Psi.h5 ; tgraph.py f.txt
	To find available datasets we can use: h5ls -r Psi.h5
	Often it is better to use h5tovtk and then plot the vtk file. For
	example, to plot dataset "rho it=0" in file rho.xy.h5 we can use:
		h5tovtk -d "rho it=0" -o f.vtk rho.xy.h5
		tgraph.py -c 1:2:4 f.vtk

FILES
	tgraph.py imports tdata.py . To find it, tdata.py should be in the
	same directory as tgraph.py, usually the ~/bin directory.

INSTALLATION
	Make a symbolic link to tgraph.py
	(ln -s ~/tgraph/tgraph.py ~/bin/tgraph.py). Or copy both tgraph.py
	and tdata.py into the same directory (e.g. ~/bin) and make sure
	that tgraph.py is executable (chmod a+x tgraph.py). For the help menu
	to work, tgraph.txt should also be in this same directory.

	Since tgraph.py is written in python, you also need to install python,
	plus the python packages tkinter, tkinter.ttk, matplotlib and numpy.
	To get all these on a new Debian system, it should suffice to type:
		apt-get install python3-matplotlib

	tgraph.py was written for python3, but it will also run
	with python2, only the terminal output will be uglier due to
	differences in the print function between python versions.

AUTHORS
	tgraph.py was written by Wolfgang Tichy.

COPYRIGHT
	Copyright (C) 2015 Wolfgang Tichy.
